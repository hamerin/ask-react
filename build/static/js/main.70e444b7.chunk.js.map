{"version":3,"sources":["firebase.ts","ColorChanger.tsx","QuestionForm.tsx","helper.ts","QuestionList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firestore","getIdList","collectionRef","a","ret","get","forEach","documentSnapshot","push","id","ColorChanger","props","onClick","onColorChange","colorCode","slice","QuestionForm","useState","text","setText","success","setSuccess","error","setError","loading","setLoading","askCollectionRef","collection","Container","Form","Field","length","control","TextArea","rows","placeholder","value","onChange","event","target","Message","header","content","Button","disabled","basic","fluid","submit_data","replace","now","moment","doc","toString","set","answer","isAnswered","timestamp","locale","format","onUpdate","console","Icon","name","lower_bound","arr","v","s","e","m","upper_bound","QuestionList","questionList","setQuestionList","totalLength","setTotalLength","createQuestionHTML","question","key","Segment","vertical","Header","size","sub","updateFront","idList","appendTo","toAppend","i","data","elem","reverse","updateBack","updateN","curLength","appendPos","useEffect","willUpdate","updateType","setWillUpdate","map","questionData","className","Loader","active","inline","randInt","from","to","Math","floor","random","App","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","colors","color","setColor","nextColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.70e444b7.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nexport { firebase };\nexport let firestore: firebase.firestore.Firestore;\n\nexport async function getIdList(collectionRef: firebase.firestore.CollectionReference<firebase.firestore.DocumentData>) {\n  let ret: string[] = [];\n  (await collectionRef.get()).forEach((documentSnapshot: firebase.firestore.DocumentSnapshot) => {\n    ret.push(documentSnapshot.id);\n  });\n\n  return ret;\n}\n\nexport default function firebaseInit() {\n  if (!firebase.apps.length) {\n    firebase.initializeApp({\n      apiKey: \"AIzaSyBezSXPBJnfO3LteDK47G8AO1anNU6_EQk\",\n      authDomain: \"hamerinask.firebaseapp.com\",\n      databaseURL: \"https://hamerinask.firebaseio.com\",\n      projectId: \"hamerinask\",\n      storageBucket: \"hamerinask.appspot.com\",\n      messagingSenderId: \"41818205126\",\n      appId: \"1:41818205126:web:ec1d6fdfb44a158ef320c7\",\n      measurementId: \"G-7JD8YMVR6R\"\n    });\n  }\n\n  firestore = firebase.firestore();\n}\n","import React from 'react';\n\ninterface ColorChangerProps {\n  colorCode: String;\n  onColorChange: () => void;\n}\n\nexport default function ColorChanger(props: ColorChangerProps) {\n  return (\n    <div id=\"color-changer\" onClick={props.onColorChange}>\n      <span>\n        {`✦ ${props.colorCode.slice(1)}`}\n      </span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport { Container, Form, TextArea, Message, Button, Icon } from 'semantic-ui-react';\nimport { firestore } from './firebase';\nimport moment from 'moment';\nimport 'moment/locale/ko';\n\ninterface QuestionFormProps {\n  onUpdate: () => void;\n}\n\nexport default function QuestionForm(props: QuestionFormProps) {\n  const lengthLimit: number = 140;\n  const [text, setText] = useState(\"\");\n\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const askCollectionRef = firestore.collection(\"Ask\");\n\n  function onTextChange(event: ChangeEvent<HTMLInputElement>) {\n    setText(event.target.value);\n  }\n\n  function onSubmit() {\n    let submit_data = text.replace(/^\\s+/, '').replace(/\\s+$/, '');\n\n    if (submit_data === '' || text.length > 140) {\n      setError(true);\n      return;\n    }\n\n    setLoading(true);\n\n    (async function () {\n      try {\n        let now = moment.now();\n\n        await askCollectionRef.doc(now.toString()).set({\n          content: submit_data,\n          answer: \"아직 답변되지 않았어요 ㅠㅠ...\",\n          isAnswered: false,\n          timestamp: moment(now).locale(\"ko\").format(\"lll\")\n        });\n\n        setText(\"\");\n        setSuccess(true);\n        setLoading(false);\n        props.onUpdate();\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }\n\n  return (\n    <Container>\n      <Form id=\"question_form\" success={success} error={error}>\n        <Form.Field error={text.length > lengthLimit} control={TextArea} rows=\"7\" placeholder=\"질문을 남기세요!\" value={text} onChange={onTextChange} />\n        <Message success header=\"질문 완료\" content=\"질문 제출이 성공적으로 완료되었어요!\" />\n        <Message error header=\"질문 제출 실패\" content=\"질문 내용은 공백이거나, 140자를 넘길 수 없습니다.\" />\n        <Button disabled={text.length > lengthLimit} loading={loading} basic fluid onClick={onSubmit}>\n          <Icon name=\"paper plane\" />{` 질문 제출하기 (${text.length}/140자)`}\n        </Button>\n      </Form>\n    </Container>\n  );\n}\n","export function lower_bound<T>(arr: T[], v: T): number {\n  let s: number = 0;\n  let e: number = arr.length;\n\n  while (s < e) {\n    let m: number = (s + e) >> 1;\n    if (arr[m] < v) s = m + 1;\n    else e = m;\n  }\n\n  return s;\n}\n\nexport function upper_bound<T>(arr: T[], v: T): number {\n  let s: number = 0;\n  let e: number = arr.length;\n\n  while (s < e) {\n    let m: number = (s + e) >> 1;\n    if (arr[m] <= v) s = m + 1;\n    else e = m;\n  }\n\n  return s;\n}","import React, { ReactElement, useEffect, useState } from 'react';\nimport { Container, Segment, Header, Icon, Loader, Button } from 'semantic-ui-react';\n\nimport { lower_bound, upper_bound } from './helper';\nimport { firestore, getIdList } from './firebase';\n\ninterface QuestionListProps {\n  willUpdate: number;\n  setWillUpdate: (x: number) => void;\n}\n\ninterface Question {\n  answer: string;\n  content: string;\n  isAnswered: boolean;\n  timestamp: string;\n}\n\ninterface QuestionData {\n  id: string;\n  elem: ReactElement;\n}\n\nexport default function QuestionList(props: QuestionListProps) {\n  const [questionList, setQuestionList] = useState([] as QuestionData[]);\n  const [totalLength, setTotalLength] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const askCollectionRef = firestore.collection(\"Ask\");\n\n  function createQuestionHTML(question: Question, key: string): ReactElement {\n    return (\n      <Segment vertical key={key}>\n        <Header size=\"medium\">\n          {question.content}\n          <Header sub>{question.timestamp}</Header>\n        </Header>\n        <p>\n          {question.isAnswered\n            ? <Icon name=\"paper plane\" />\n            : <Icon name=\"paper plane outline\" />\n          }\n          {question.answer}\n        </p>\n      </Segment>\n    );\n  }\n\n  async function updateFront() {\n    let idList = await getIdList(askCollectionRef);\n    setTotalLength(idList.length);\n\n    let curLength = questionList.length;\n    if (!curLength) return;\n    let appendTo = upper_bound(idList, questionList[0].id)\n\n    let toAppend: QuestionData[] = [];\n    for (let i = appendTo; i < idList.length; i++) {\n      let id = idList[i];\n      let question = (await askCollectionRef.doc(idList[i]).get()).data() as Question;\n      toAppend.push({\n        id: id,\n        elem: createQuestionHTML(question, id)\n      });\n    }\n\n    toAppend.reverse();\n    setQuestionList(arr => [...toAppend, ...arr]);\n  }\n\n  async function updateBack(updateN: number = 5) {\n    let idList = await getIdList(askCollectionRef);\n    setTotalLength(idList.length);\n\n    let curLength = questionList.length;\n    let appendPos = curLength ? lower_bound(idList, questionList[curLength - 1].id) : idList.length;\n\n    let toAppend: QuestionData[] = [];\n    for (let i = appendPos - 1; i >= appendPos - updateN; i--) {\n      if (i < 0) break;\n\n      let id = idList[i];\n      let question = (await askCollectionRef.doc(idList[i]).get()).data() as Question;\n      toAppend.push({\n        id: id,\n        elem: createQuestionHTML(question, id)\n      });\n    }\n\n    setQuestionList(arr => [...arr, ...toAppend])\n  }\n\n  useEffect(() => {\n    (async function () {\n      if (props.willUpdate) {\n        let updateType = props.willUpdate;\n        props.setWillUpdate(0);\n        if (updateType === 1) await updateFront();\n        if (updateType === 2) {\n          setLoading(true);\n          await updateBack();\n          setLoading(false);\n        }\n      }\n    })();\n  });\n\n  if (questionList.length) {\n    return (\n      <Container id=\"answer_container\">\n        {questionList.map((questionData) => questionData.elem)}\n        <div className=\"aligner\">\n          <Button basic disabled={questionList.length === totalLength} loading={loading} onClick={() => { props.setWillUpdate(2); }}>\n            {`더 불러오기 (${questionList.length}/${totalLength})`}\n          </Button>\n        </div>\n      </Container>\n    );\n  } else {\n    return (\n      <Container id=\"answer_container\">\n        <Loader active inline=\"centered\">질문을 가져오고 있어요...</Loader>\n      </Container>\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport firebaseInit from './firebase';\n\nimport ColorChanger from './ColorChanger';\nimport QuestionForm from './QuestionForm';\nimport QuestionList from './QuestionList';\n\n// Returns random integer choosed from range [from, to)\nfunction randInt(from: number, to: number): number {\n  return Math.floor(Math.random() * (to - from) + from);\n}\n\nexport default function App() {\n  firebaseInit();\n\n  const colors: String[] = ['#404759', '#467f8c', '#f2dd72', '#f2bbbb', '#382f4b', '#005daa', '#ab94fc', '#abcdef', '#c7e2cf', '#c4beef', '#ef4b3f', '#134515'];\n  const [color, setColor] = useState(randInt(0, colors.length));\n\n  // 0: not update, 1: appendFront, 2: appendBack\n  let [willUpdate, setWillUpdate] = useState(2);\n\n  function onColorChange() {\n    let nextColor: number = randInt(0, colors.length);\n    while (nextColor === color) nextColor = randInt(0, colors.length);\n    setColor(nextColor);\n  }\n\n  return (\n    <div className={`c${color + 1}`}>\n      <div className=\"hiu section full\" id=\"first\">\n        <ColorChanger colorCode={colors[color]} onColorChange={onColorChange} />\n        <QuestionForm onUpdate={() => setWillUpdate(1)} />\n      </div>\n      <div className=\"hiu section full\" id=\"second\">\n        <QuestionList willUpdate={willUpdate} setWillUpdate={setWillUpdate} />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}